openapi: 3.0.0
info:
  title: PetWatcher
  description: Documentation de l'API utilisé pour l'application mobile PetWatcher
  version: 0.1.0
servers:
  - url: http://localhost:8000/api
    description: Local
  - url: https://rea.fourkane.me/api
    description: Serveur
tags:
  - name: users
    description: Gestion des utilisateurs
  - name: tokens
    description: Gestion des tokens d'authentification
  - name: pets
    description: Gestion des animaux
  - name: upload
    description: Gestion des upload
  - name: reviews
    description: Gestion des avis
  - name: reservations
    description: Gestion des reservations

paths:
  /users:
    get:
      tags:
        - users
      summary: Retourne la liste des utilisateurs
      responses:
        200:
          description: Un tableau JSON des utilisateurs
          content:
            application/json:
              example: [
              {
                "id": 1,
                "created_at": "2023-01-24T14:16:57.000000Z",
                "updated_at": "2023-01-24T14:16:57.000000Z",
                "isIndividual": 1,
                "isCompany": 0,
                "isPetSitter": 0,
                "email": "fourkane@mail.com",
                "phoneNumber": "0639469563",
                "city": "Saint Priest",
                "postalCode": "69800",
                "address": "1 rue cool",
                "firstname": "Fourkane",
                "lastname": "Saïd Ali",
                "companyName": null,
                "siretNumber": null,
                "website": null,
                "keepDogs": null,
                "keepCats": null,
                "acceptedWeight": null,
                "description": null,
                "imageURL": null
              }
            ]
    post:
      tags:
        - users
      summary: Crée un nouvel utilisateur
      parameters:
        - in: query
          name: password
          description: Le mot de passe de l'utilisateur
          required: true
        - in: query
          name: email
          description: L'adresse mail de l'utilisateur
          required: true
        - in: query
          name: phoneNumber
          description: Le numéro de téléphone de l'utilisateur
          required: true
        - in: query
          name: role
          description: Le role du nouvel utilisateur (company, individual ou petsitter)
          required: true
        - in: query
          name: city
          description: Le nom de la ville de l'utilisateur
          required: true
        - in: query
          name: postalCode
          description: Code postal de l'utilisateur
          required: true
        - in: query
          name: address
          description: L'adresse de l'utilisateur
          required: true
        - in: query
          name: companyName
          description: Le nom de l'entreprise
        - in: query
          name: siretNumber
          description: Le numéro de siret de l'entreprise
        - in: query
          name: website
          description: Le site internet de l'entreprise
        - in: query
          name: firstname
          description: Le prénom de l'utilisateur
        - in: query
          name: lastname
          description: Le nom de l'utilisateur
        - in: query
          name: imageLocation
          description: Un tableau d'URL des photos du lieu d'hebergement (pour les pro et les petsitters)
        - in: query
          name: profilImage
          description: L'url de la photo de profil
      responses:
        201:
          description: L'utilisateur a été créé. Retourne le token de l'utilisateur
          content:
            application/json:
              schema:
                type: string
                example: token
                description: Le token de l'utilisateur créé
        400:
          description: La requête ne contient pas les champs email et password
        401:
          description: L'adresse mail existe déjà
  /users/{id}:
    get:
      tags:
        - users
      summary: Affiche un utilisateur selon son id
      parameters:
        - in: path
          name: id
          description: L'identifiant de l'utilisateur
      responses:
        200:
          description: Un JSON de l'utilisateur
          content:
            application/json:
              schema:
                type: object
                example: {
                  "id": 1,
                  "created_at": "2023-01-24T14:16:57.000000Z",
                  "updated_at": "2023-01-24T14:16:57.000000Z",
                  "isIndividual": 1,
                  "isCompany": 0,
                  "isPetSitter": 0,
                  "email": "fourkane@mail.com",
                  "phoneNumber": "0639469563",
                  "city": "Saint Priest",
                  "postalCode": "69800",
                  "address": "1 rue cool",
                  "firstname": "Fourkane",
                  "lastname": "Saïd Ali",
                  "companyName": null,
                  "siretNumber": null,
                  "website": null,
                  "keepDogs": null,
                  "keepCats": null,
                  "acceptedWeight": null,
                  "description": null,
                  "imageURL": null
                }
        404:
          description: L'utilisateur n'existe pas
    patch:
      tags:
        - users
      summary: Modifie un utilisateur
      description: Les champs vide ou ne correspondant pas au role de l'utilisateur ne sont pas modifiés
      security:
        - Authentification: [write]
      parameters:
        - in: path
          name: id
          description: L'identifiant de l'utilisateur a modifier
          required: true
        - in: query
          name: phoneNumber
          description: Le numéro de téléphone
        - in: query
          name: city
          description: La ville
        - in: query
          name: postalCode
          description: Le code postal
        - in: query
          name: address
          description: L'adresse
        - in: query
          name: companyName
          description: Le nom de l'entreprise (uniquement pour les compte pro)
        - in: query
          name: siretNumber
          description: Le numéro siret (uniquement pour les compte pro)
        - in: query
          name: website
          description: Le site internet (uniquement pour les compte pro)
        - in: query
          name: firstname
          description: Le prénom (uniquement pour les comptes non pro)
        - in: query
          name: lastname
          description: Le nom (uniquement pour les comptes non pro)
        - in: query
          name: keepDogs
          description: Garde les chiens (uniquement pour les pet-sitter et les pro)
        - in: query
          name: keepCats
          description: Garde les chiens (uniquement pour les pet-sitter et les pro)
        - in: query
          name: acceptedWeight
          description: Liste des gabarits acceptés => tableau stringifié (uniquement pour les pet-sitter et les pro)
        - in: query
          name: description
          description: Des infos supplémentaires sur l'utilisateur  (uniquement pour les pet-sitter et les pro)
        - in: query
          name: imageLocation
          description: Un tableau d'URL des photos du lieu d'hebergement
        - in: query
          name: profilImage
          description: L'url de la photo de profil
      responses:
        200:
          description: L'utilisateur a été supprimé
        400:
          description: Le token est manquant ou incorrect
        401:
          description: L'utilisateur connecté n'est pas autorisé à supprimer cet utilisateur
        404:
          description: L'utilisateur n'existe pas
    delete:
      tags:
        - users
      summary: Supprime un utilisateur
      security:
        - Authentification: [write]
      parameters:
        - in: path
          name: id
          description: L'identifiant de l'utilisateur a supprimer
          required: true
      responses:
        200:
          description: L'utilisateur a été supprimé
        400:
          description: Le token est manquant ou incorrect
        401:
          description: L'utilisateur connecté n'est pas autorisé à supprimer cet utilisateur
        404:
          description: L'utilisateur n'existe pas
  /tokens:
    get:
      tags:
        - tokens
      summary: Vérifie et décode le token
      security:
        - Authentification: [read]
      responses:
        200:
          description: Le token est correct. Retourne l'id de l'utilisateur
          content:
            application/json:
              schema:
                type: integer
                example: 0
        400:
          description: Le token est manquant ou non valide
        404:
          description: L'utilisateur du token n'existe pas
    post:
      tags:
        - tokens
      summary: Génére un token (Connexion)
      parameters:
        - in: query
          name: email
          description: L'adresse mail de l'utilisateur
        - in: query
          name: password
          description: Le mot de passe de l'utilisateur
      responses:
        200:
          description: Retourne le token généré
          content:
            application/json:
              schema:
                type: string
                example: "token"
        400:
          description: Les champs email et password ne sont pas renseignés
        401:
          description: Le mot de passe est incorrect
        404:
          description: L'email n'existe pas
  /pets:
    get:
      tags:
        - pets
      summary: Liste tous les animaux
      responses:
        200:
          description: Un tabluau JSON de tous les animaux
          content:
            application/json:
              schema:
                type: array
    post:
      tags:
        - pets
      summary: Permet d'ajouter un animal
      security:
        - Authentification: [ write ]
      parameters:
        - in: query
          name: name
          description: Le nom de l'animal
          required: true
        - in: query
          name: gender
          description: Le genre de l'animal (Mâle ou Femelle)
          required: true
        - in: query
          name: type
          description: Le type d'animal (Chat ou Chien)
          required: true
        - in: query
          name: birth
          description: La date de naissance de l'animal
          required: true
        - in: query
          name: adoptionDate
          description: La date d'adoption de l'animal
          required: true
        - in: query
          name: weight
          description: La catégorie de poids de l'animal [Petit, Moyen, Grand, Géant]
          required: true
        - in: query
          name: vaccines
          description: Les vaccins de l'animal
          required: true
        - in: query
          name: isAllergies
          description: booléen indiquant si l'animal a des allergies
          required: true
        - in: query
          name: allergies
          description: Les allergies de l'animal
        - in: query
          name: isMedications
          description: booléen indiquant si l'animal doit prendre des médicaments
          required: true
        - in: query
          name: medicationsAndFrequences
          description: liste des médicaments avec leurs fréquences
        - in: query
          name: isHealthProblems
          description: booléen indiquant si l'animal a des problèmes de santé
          required: true
        - in: query
          name: healthProblems
          description: Liste les problèmes de santé de l'animal
        - in: query
          name: dateLastVeterinaryConsultation
          description: Date de derniere consultation au vétérinaire
          required: true
        - in: query
          name: description
          description: description générale de l'animal
          required: true
        - in: query
          name: photoUrl
          description: L'url de la photo de l'animal
      responses:
        201:
          description: L'animal a été créé
        400:
          description: La requête est incorrecte
        401:
          description: L'utilisateur n'est pas authentifié
  /pets/{id}:
    get:
      tags:
        - pets
      summary: Affiche un animal selon son id
      parameters:
        - in: path
          name: id
          description: L'identifiant de l'animal
      responses:
        200:
          description: Affiche un JSON représentant l'animal
        404:
          description: L'animal n'existe pas
    patch:
      tags:
        - pets
      summary: Modifie un animal
      description: Les champs vides ne sont pas modifiés
      security:
        - Authentification: [ write ]
      parameters:
        - in: path
          name: id
          description: L'identifiant de l'animal
        - in: query
          name: name
          description: Le nom de l'animal
        - in: query
          name: gender
          description: Le genre de l'animal (Mâle ou Femelle)
        - in: query
          name: type
          description: Le type d'animal (Chat ou Chien)
        - in: query
          name: birth
          description: La date de naissance de l'animal
        - in: query
          name: adoptionDate
          description: La date d'adoption de l'animal
        - in: query
          name: weight
          description: La catégorie de poids de l'animal [Petit, Moyen, Grand, Géant]
        - in: query
          name: vaccines
          description: Les vaccins de l'animal
        - in: query
          name: isAllergies
          description: booléen indiquant si l'animal a des allergies
        - in: query
          name: allergies
          description: Les allergies de l'animal
        - in: query
          name: isMedications
          description: booléen indiquant si l'animal doit prendre des médicaments
        - in: query
          name: medicationsAndFrequences
          description: liste des médicaments avec leurs fréquences
        - in: query
          name: isHealthProblems
          description: booléen indiquant si l'animal a des problèmes de santé
        - in: query
          name: healthProblems
          description: Liste les problèmes de santé de l'animal
        - in: query
          name: dateLastVeterinaryConsultation
          description: Date de derniere consultation au vétérinaire
        - in: query
          name: description
          description: description générale de l'animal
        - in: query
          name: photoUrl
          description: L'url de la photo de l'animal
      responses:
        200:
          description: L'animal a été modifié
        401:
          description: L'utilisateur n'est pas autorisé à modifier cet animal
        404:
          description: L'animal n'existe pas
    delete:
      tags:
        - pets
      summary: Supprime un animal
      security:
        - Authentification: [ write ]
      parameters:
        - in: path
          name: id
          description: L'identifiant de l'animal
      responses:
        200:
          description: L'animal a été supprimé
        401:
          description: Vous ne pouvez pas supprimer cet animal
        404:
          description: Cet animal n'existe pas
  /pets/byUserId/{id}:
    get:
      tags:
        - pets
      summary: Liste tous les animaux d'un utilisateur
      parameters:
        - in: path
          name: id
          description: L'identifiant de l'utilisateur
      responses:
        200:
          description: Tableau JSON des animaux de l'utilisateur
        404:
          description: L'utilisateur n'existe pas
  /uploadImage:
    post:
      tags:
        - upload
      summary: Permet d'upload une image
      security:
        - Authentification: [ write ]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                # 'file' will be the field name in this multipart request
                image:
                  type: string
                  format: binary
      responses:
        200:
          description: Retourne le nom et l'url de l'image uploadé sur le serveur
  /reviews:
    get:
      tags:
        - reviews
      summary: Gestion des avis
      responses:
        200:
          description: Retourne un tableau JSON comportant l'ensemble des avis postées
    post:
      tags:
        - reviews
      summary: Ajout d'un nouvel avis
      security:
        - Authentification: [ write ]
      requestBody:
        content:
          application/json:
            schema:
              example: {
                         userReceiverId: 1,
                         description: "Une description",
                         stars: 4
              }

      responses:
        200:
          description: Un nouvel avis créé
        404:
          description: L'utilisateur n'existe pas
        401:
          description: Des champs sont non renseignés
  /reviews/{id}:
    get:
      tags:
        - reviews
      summary: Affiche un avis
      parameters:
        - in: path
          name: id
          description: L'identifiant de l'avis
      responses:
        200:
          description: Affiche l'avis
        404:
          description: L'avis n'existe pas
    delete:
      tags:
        - reviews
      summary: Supprime un avis
      parameters:
        - in: path
          name: id
          description: L'identifiant de l'avis
      responses:
        200:
          description: L'avis a été supprimé
        404:
          description: L'avis n'existe pas
  /reviews/stars/{id}:
    get:
      tags:
        - reviews
      summary: Retourne le nombre d'étoiles moyen laissé à un utilisateur
      parameters:
        - in: path
          name: id
          description: L'identifiant de l'avis
      responses:
        200:
          description: Le nombre d'étoiles moyen (ou 0 si aucun avis)
        404:
          description: L'utilisateur n'existe pas
  /reviews/byUserId/{id}:
    get:
      tags:
        - reviews
      summary: Retourne les avis laissé à un utilisateur
      parameters:
        - in: path
          name: id
          description: L'identifiant de l'avis
      responses:
        200:
          description: Un tableau comportant tous les avis laisséss à un utilisateur
        404:
          description: L'utilisateur n'existe pas
  /reviews/sendByUserId/{id}:
    get:
      tags:
        - reviews
      summary: Retourne les avis qu'un utilisateur a posté
      parameters:
        - in: path
          name: id
          description: L'identifiant de l'avis
      responses:
        200:
          description: Un tableau comportant tous les avis qu'a posté un utilisateur
        404:
          description: L'utilisateur n'existe pas
  /reservations:
    get:
      tags:
        - reservations
      summary: Retourne la liste de toutes les reservations
      responses:
        200:
          description: Un tableau JSON comportant l'ensemble des reservations
    post:
      tags:
        - reservations
      security:
        - Authentification: [ write ]
      summary: Permet de créer une nouvelle reservation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: {
                         userIdPro : 2,
                         start: 'Sun Dec 17 1995 01:00:00 GMT+0100',
                         end: 'Sun Dec 17 1995 01:00:00 GMT+0100',
                         idPets: [1]
              }
      responses:
        200:
          description: La reservation créée
        400:
          description: Des champs sont manquants
  /reservations/{id}:
    get:
      tags:
        - reservations
      summary: Affiche une reservation
      parameters:
        - in: path
          name: id
          description: L'identifiant de la reservation
      responses:
        200:
          description: Retourne une reservation
        404:
          description: La reservation n'existe pas
  /reservations/accept/{id}:
    patch:
      tags:
        - reservations
      security:
        - Authentification: [ write ]
      summary: Accepte une reservation
      parameters:
        - in: path
          name: id
          description: L'identifiant de la reservation
      responses:
        200:
          description: La reservation a été acceptée
        401:
          description: L'utilisateur n'est pas autorisé à modifier cette reservation
        404:
          description: La reservation n'existe pas
  /reservations/refuse/{id}:
    patch:
      tags:
        - reservations
      security:
        - Authentification: [ write ]
      summary: Refuse une reservation
      parameters:
        - in: path
          name: id
          description: L'identifiant de la reservation
      responses:
        200:
          description: La reservation a été refusé
        401:
          description: L'utilisateur n'est pas autorisé à modifier cette reservation
        404:
          description: La reservation n'existe pas
  /reservations/byUserId/client/{id}:
    get:
      tags:
        - reservations
      summary: Liste toutes les reservations d'un client
      parameters:
        - in: path
          name: id
          description: L'identifiant de l'utilisateur
      responses:
        200:
          description: Retourne toutes les reservations
        404:
          description: L'utilisateur n'existe pas
  /reservations/byUserId/petSitterPro/{id}:
    get:
      tags:
        - reservations
      summary: Liste toutes les reservations d'un pro ou pet sitter
      parameters:
        - in: path
          name: id
          description: L'identifiant de l'utilisateur
      responses:
        200:
          description: Retourne toutes les reservations
        404:
          description: L'utilisateur n'existe pas

components:
  securitySchemes:
    Authentification:
      type: apiKey
      in: header
      name: Authorization
